[{"/Users/mihail/Trello_react/my-app/src/index.js":"1","/Users/mihail/Trello_react/my-app/src/reportWebVitals.js":"2","/Users/mihail/Trello_react/my-app/src/store.js":"3","/Users/mihail/Trello_react/my-app/src/components/input/index.jsx":"4","/Users/mihail/Trello_react/my-app/src/components/signup/index.jsx":"5","/Users/mihail/Trello_react/my-app/src/pages/signup/index.jsx":"6","/Users/mihail/Trello_react/my-app/src/pages/signin/index.jsx":"7","/Users/mihail/Trello_react/my-app/src/components/signin/index.jsx":"8","/Users/mihail/Trello_react/my-app/src/slice/formSlice.js":"9","/Users/mihail/Trello_react/my-app/src/App.js":"10","/Users/mihail/Trello_react/my-app/src/components/scrollWrapper/index.jsx":"11","/Users/mihail/Trello_react/my-app/src/pages/text/index.jsx":"12","/Users/mihail/Trello_react/my-app/src/pages/skills/index.jsx":"13","/Users/mihail/Trello_react/my-app/src/components/menu/index.jsx":"14","/Users/mihail/Trello_react/my-app/src/components/skills/index.jsx":"15","/Users/mihail/Trello_react/my-app/src/slice/skillsSlice.js":"16","/Users/mihail/Trello_react/my-app/src/slice/newModulesSlice.js":"17","/Users/mihail/Trello_react/my-app/src/components/modules/index.jsx":"18","/Users/mihail/Trello_react/my-app/src/slice/courseSlice.js":"19","/Users/mihail/Trello_react/my-app/src/components/course/index.jsx":"20","/Users/mihail/Trello_react/my-app/src/components/scrollConnector/index.jsx":"21","/Users/mihail/Trello_react/my-app/src/components/topMenu/index.jsx":"22","/Users/mihail/Trello_react/my-app/src/components/text/index.jsx":"23","/Users/mihail/Trello_react/my-app/src/slice/textSlice.js":"24","/Users/mihail/Trello_react/my-app/src/components/preloader/index.jsx":"25","/Users/mihail/Trello_react/my-app/src/pages/music/index.jsx":"26","/Users/mihail/Trello_react/my-app/src/components/music/index.jsx":"27","/Users/mihail/Trello_react/my-app/src/slice/musicSlice.js":"28"},{"size":603,"mtime":1633387377094,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1633085100965,"results":"31","hashOfConfig":"30"},{"size":649,"mtime":1635598105928,"results":"32","hashOfConfig":"30"},{"size":1272,"mtime":1633358413588,"results":"33","hashOfConfig":"30"},{"size":3597,"mtime":1634574313138,"results":"34","hashOfConfig":"30"},{"size":510,"mtime":1633387914570,"results":"35","hashOfConfig":"30"},{"size":509,"mtime":1633712477138,"results":"36","hashOfConfig":"30"},{"size":2142,"mtime":1635596823323,"results":"37","hashOfConfig":"30"},{"size":776,"mtime":1634574297012,"results":"38","hashOfConfig":"30"},{"size":905,"mtime":1635596770606,"results":"39","hashOfConfig":"30"},{"size":1135,"mtime":1635598238424,"results":"40","hashOfConfig":"30"},{"size":439,"mtime":1634692581519,"results":"41","hashOfConfig":"30"},{"size":456,"mtime":1634576100659,"results":"42","hashOfConfig":"30"},{"size":838,"mtime":1633383649403,"results":"43","hashOfConfig":"30"},{"size":3902,"mtime":1635597332213,"results":"44","hashOfConfig":"30"},{"size":15351,"mtime":1633521834544,"results":"45","hashOfConfig":"30"},{"size":8668,"mtime":1633527569219,"results":"46","hashOfConfig":"30"},{"size":3235,"mtime":1635594670838,"results":"47","hashOfConfig":"30"},{"size":772,"mtime":1635593383052,"results":"48","hashOfConfig":"30"},{"size":1181,"mtime":1635594501132,"results":"49","hashOfConfig":"30"},{"size":456,"mtime":1634695718407,"results":"50","hashOfConfig":"30"},{"size":2077,"mtime":1634695709744,"results":"51","hashOfConfig":"30"},{"size":4221,"mtime":1635962376396,"results":"52","hashOfConfig":"30"},{"size":9495,"mtime":1634696363871,"results":"53","hashOfConfig":"30"},{"size":280,"mtime":1635594029292,"results":"54","hashOfConfig":"30"},{"size":444,"mtime":1635595125962,"results":"55","hashOfConfig":"30"},{"size":9426,"mtime":1638642815111,"results":"56","hashOfConfig":"30"},{"size":1554,"mtime":1638631836076,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1u29ld6",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"/Users/mihail/Trello_react/my-app/src/index.js",[],["120","121"],"/Users/mihail/Trello_react/my-app/src/reportWebVitals.js",[],"/Users/mihail/Trello_react/my-app/src/store.js",[],"/Users/mihail/Trello_react/my-app/src/components/input/index.jsx",[],"/Users/mihail/Trello_react/my-app/src/components/signup/index.jsx",[],"/Users/mihail/Trello_react/my-app/src/pages/signup/index.jsx",[],"/Users/mihail/Trello_react/my-app/src/pages/signin/index.jsx",[],"/Users/mihail/Trello_react/my-app/src/components/signin/index.jsx",["122"],"import { useState } from \"react\"\nimport { useDispatch } from 'react-redux';\nimport { setUser } from '../../slice/formSlice'\nimport Input from '../input'\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Signin(){\n    const dispatch = useDispatch();\n    let history = useHistory();\n\n    const handleClick = () => {\n        history.push(\"/signup\");\n    }\n\n    const [inputValues, setInputValues] = useState({\n        login: {\n            value: '', \n            type: 'text', \n            placeholder: 'Логин',\n            name: 'login',\n        },  \n        password: {\n            value: '', \n            type: 'password', \n            placeholder: 'password',\n            name: 'password',\n        }, \n    });\n\n    const setNewUser = () => {\n        const obj = {};\n        for(let key in inputValues){\n            if(inputValues.hasOwnProperty(key)){\n                obj[key] = inputValues[key].value\n            }\n        }\n        dispatch(setUser(obj))\n    }\n\n    const inputChange = (e) => {\n        const { name, value } = e.target;\n        setInputValues({ ...inputValues, [name]: {...inputValues[name], value: value }});\n    }\n\n    return(\n        <div className=\"form registration\">\n            <div className=\"form__title\">Вход</div>\n            <form >\n                {Object.entries(inputValues).map((el, i) => {\n                    const inputVal = inputValues[el[0]];\n                    return <Input \n                        type={inputVal.type}\n                        placeholder={inputVal.placeholder}\n                        changeFunc={inputChange}\n                        name={el[0]}\n                        title={inputVal.name}\n                        key={i+inputVal.name}\n                        value={inputVal.value}\n                        options={inputVal.options ? inputVal.options : null}\n                    />\n                })}\n                <input key=\"submit\" type=\"submit\" value=\"Войти\"/>\n                <div onClick={handleClick} className=\"come_in\">\n                    Регистрация\n                </div>\n            </form>\n        </div>\n    )\n}","/Users/mihail/Trello_react/my-app/src/slice/formSlice.js",[],"/Users/mihail/Trello_react/my-app/src/App.js",[],"/Users/mihail/Trello_react/my-app/src/components/scrollWrapper/index.jsx",[],"/Users/mihail/Trello_react/my-app/src/pages/text/index.jsx",[],"/Users/mihail/Trello_react/my-app/src/pages/skills/index.jsx",[],"/Users/mihail/Trello_react/my-app/src/components/menu/index.jsx",["123","124","125","126","127","128","129","130","131","132"],"export default function SideMenu(props){\n    const {isModer} = props;\n    return(\n        <div className=\"side_menu\">\n            <div className=\"side_menu__logo\"></div>\n            <div className=\"side_menu__nav\">\n                <a className=\"side_menu__element play\"></a>\n                <a className=\"side_menu__element magnifire\"></a>\n                <a className=\"side_menu__element ring\"></a>\n                <a className=\"side_menu__element bell\"></a>\n                {isModer &&\n                    <a className=\"side_menu__element bell\"></a>\n                }\n            </div>\n            <div className=\"side_menu__avatar\" style={{backgroundImage:`url(https://upload.wikimedia.org/wikipedia/commons/thumb/e/e2/Circle-icons-gamecontroller.svg/2048px-Circle-icons-gamecontroller.svg.png})`}}></div>\n        </div>\n    )\n}\n    \n","/Users/mihail/Trello_react/my-app/src/components/skills/index.jsx",[],"/Users/mihail/Trello_react/my-app/src/slice/skillsSlice.js",[],"/Users/mihail/Trello_react/my-app/src/slice/newModulesSlice.js",[],"/Users/mihail/Trello_react/my-app/src/components/modules/index.jsx",[],"/Users/mihail/Trello_react/my-app/src/slice/courseSlice.js",[],"/Users/mihail/Trello_react/my-app/src/components/course/index.jsx",["133"],"\nimport { selectCourse, selectCourseActive, setActive } from '../../slice/courseSlice'\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\n\n\nexport default function Course(props){\n    const course = useSelector(selectCourse)\n    const active = useSelector(selectCourseActive)\n    const dispatch = useDispatch()\n\n    return(\n        <>\n            {\n                active &&\n                <div className=\"add_modules menu active\">\n                    <div className=\"add_modules__container\">\n                        <div className=\"add_modules__cross\" onClick={() => {dispatch(setActive(false))}}></div>\n                        <div className=\"add_modules__title\">{course.name}</div>\n                        <ul>\n                            {course.lessons.map(el => (\n                                <li className={el.isComplite ? 'active' : ''}>\n                                    <a>{el.name}</a>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                    <div className=\"add_modules__bg\"></div>\n                </div>\n            }\n        </>\n    )\n}\n","/Users/mihail/Trello_react/my-app/src/components/scrollConnector/index.jsx",[],"/Users/mihail/Trello_react/my-app/src/components/topMenu/index.jsx",[],"/Users/mihail/Trello_react/my-app/src/components/text/index.jsx",["134"],"\nimport { selectCourseContent } from '../../slice/textSlice'\nimport { useSelector } from 'react-redux'\nimport Slider from \"react-slick\";\n\nexport default function Text(props){\n\n    const content = useSelector(selectCourseContent)\n\n    const options = {\n        slidesToShow: 1,\n        dots: true,\n        infinite: true,\n        speed: 500,\n        slidesToScroll: 1,\n        fade: true,\n    }\n\n    return(\n        <>\n            <div className=\"text__content\">\n                {Object.entries(content).map(([key_id, el], i) => {\n                    if(key_id === \"title\"){\n                        return (\n                            <div className=\"text__title\">\n                                <div className=\"text__title__text\">\n                                    {el}\n                                </div>\n                                <div className=\"text__title__menu\"></div>\n                            </div>\n                        )\n                    }\n\n                    if(key_id === \"banner\"){\n                        return <div className=\"text__image\" style={{backgroundImage:`url(${el})`}}></div>\n                    }\n\n                    if(key_id === \"content\"){\n                        console.log(el)\n\n                        return (\n                            <div className=\"text__content__padding\">\n                                {el.map((elem, id) => {\n                                    switch (elem.type){\n                                        case 'text':\n                                            console.log(elem.сontent)\n                                            return <div key={id.toString()+elem.type} className=\"text__info\">{elem.content}</div>\n                                        case 'title':\n                                            return <h2 key={id.toString()+elem.type} className=\"text__subtitle\">{elem.content}</h2>\n                                        case 'image':\n                                            return <img key={id.toString()+elem.type} src={elem.content} alt={elem.content} className=\"text__img\"/>\n                                        case 'describtion':\n                                            return <div key={id.toString()+elem.type} className=\"text__describtion\">{elem.content}</div>\n                                        case 'collection':\n                                            return <div key={id.toString()+elem.type} className=\"text__slider__container\">\n                                                        <div className=\"text__slider\">\n                                                            <Slider {...options}>\n                                                                {elem.content.map(picture => (\n                                                                        <div className=\"text__slider__element\">\n                                                                            <div style={{\n                                                                                width: '100%',\n                                                                                height: '100%',\n                                                                                borderRadius: '12px',\n                                                                                backgroundImage:`url(${picture})`\n                                                                            }}/>\n                                                                        </div>\n                                                                    )\n                                                                    )\n                                                                }\n                                                            </Slider>\n                                                        </div>\n                                                    </div>\n                                        default:\n                                            return <></>\n                                    }\n                                })}\n                            </div>\n                        ) \n                    }\n                })}\n            </div> \n        </>\n    )\n}","/Users/mihail/Trello_react/my-app/src/slice/textSlice.js",[],"/Users/mihail/Trello_react/my-app/src/components/preloader/index.jsx",[],"/Users/mihail/Trello_react/my-app/src/pages/music/index.jsx",[],"/Users/mihail/Trello_react/my-app/src/components/music/index.jsx",["135"],"import { useSelector, useStore } from \"react-redux\";\nimport { useState, useRef } from \"react\";\nimport { selectMusic, setTime } from '../../slice/musicSlice'\n\nimport Butterfly from './Butterfly.mp3'\nimport Suppermassive from './Suppermassive.mp3'\nimport Time from './Time.mp3'\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\n\nexport default function Music(props){\n    const music = useSelector(selectMusic)\n    const musicStore = useStore()\n    const dispatch = useDispatch()\n    let loadedMusic = useRef({})\n    const [activeMusic, setActiveMusic] = useState({id: null, index: null})\n    const activeInterval = useRef()\n    const [musicPointPosition, setMusicPointPosition] = useState(0)\n    const [isPaused, setIsPaused] = useState(false)\n\n    async function playTrack(id, index){\n        if(loadedMusic.current[id]){\n            let prevId;\n            prevId = activeMusic.id;\n            if(id === prevId){\n                if(isPaused){\n                    clearInterval(activeInterval.current) \n                } else {\n                    setStoreTime(index)\n                }\n                togglePause()\n            } else {\n                setActiveMusic({id, index})\n                if(!isPaused){\n                    setIsPaused(!isPaused)\n                }\n                clearInterval(activeInterval.current) \n                setStoreTime(index)\n                loadedMusic.current[prevId].pause()\n                loadedMusic.current[id].play()\n            }\n        } else {\n            loadTrack(id, () => {\n                let prevId;\n                if(activeMusic.id){\n                    prevId = activeMusic.id\n                }\n                setActiveMusic({id, index})\n                if(prevId){\n                    loadedMusic.current[prevId].pause();\n                }\n                if(activeInterval.current){\n                    clearInterval(activeInterval.current)\n                }\n                setStoreTime(index)\n                loadedMusic.current[id].play()\n                setIsPaused(true)\n            })\n            \n        }\n        \n    }\n\n    const loadTrack = (id, func = () => {}) => {\n        let audio = new Audio();\n\n        if(id === '10078'){\n            audio.src = Butterfly\n            audio.currentTime = 0\n        }\n        if(id === '10077'){\n            audio.src = Suppermassive\n            audio.currentTime = 120\n            console.log('Suppermassive')\n        }\n        if(id === '10076'){\n            audio.src = Time\n            audio.currentTime = 72\n        }\n\n        audio.onloadedmetadata = function(){\n            loadedMusic.current = ({...loadedMusic.current, [id]: audio})\n            func()\n        }\n    }\n\n    const switchTrack = (string) => {\n        if(string === 'right'){\n            const currentIndex = activeMusic.index;\n            const nextId = music[currentIndex + 1].id.toString();\n            if(!loadedMusic[nextId]){\n                loadTrack(nextId, () => {\n                    let prevId = activeMusic.id\n                    setActiveMusic({id: nextId, index: currentIndex + 1})\n                    loadedMusic.current[prevId].pause();\n                    if(activeInterval.current){\n                        clearInterval(activeInterval.current)\n                    }\n                    setStoreTime(currentIndex + 1)\n                    loadedMusic.current[nextId].play()\n                })\n            }\n        } else {\n            const currentIndex = activeMusic.index;\n            const nextId = music[currentIndex - 1].id.toString();\n            if(!loadedMusic[nextId]){\n                loadTrack(nextId, () => {\n                    let prevId = activeMusic.id\n                    setActiveMusic({id: nextId, index: currentIndex - 1})\n                    loadedMusic.current[prevId].pause();\n                    if(activeInterval.current){\n                        clearInterval(activeInterval.current)\n                    }\n                    setStoreTime(currentIndex - 1)\n                    loadedMusic.current[nextId].play()\n                })\n            }\n        }\n    }\n\n    const setCurrentTime = (event) => {\n        let bounds = event.target.getBoundingClientRect();\n        let x = event.clientX - bounds.left;\n\n        loadedMusic.current[activeMusic.id].pause();\n        clearInterval(activeInterval.current);\n\n        let currentSec = Math.floor(music[activeMusic.index].fullTime\n            .split(':')\n            .reduce((previousValue, item, index) => index === 0 ? previousValue += parseInt(item) * 60 : previousValue += parseInt(item), 0) * Math.floor(x / bounds.width * 100) / 100)\n        const sec = currentSec % 60\n        const min  = (currentSec - sec) / 60\n        let fullSec = music[activeMusic.index].fullTime.split(':').reduce((previousValue, item, index) => index === 0 ? previousValue += parseInt(item) * 60 : previousValue += parseInt(item), 0)\n\n        dispatch(setTime({index: activeMusic.index, time: niceTime(min, sec)}))\n        loadedMusic.current[activeMusic.id].currentTime = currentSec;\n\n        setMusicPointPosition(currentSec / fullSec * 100)\n        setStoreTime(activeMusic.index)\n        loadedMusic.current[activeMusic.id].play();\n    }\n    \n    const setStoreTime = (index) => {\n        let [min, sec] = musicStore.getState().music.music[index].startTime.split(':').map(el => parseInt(el))\n        let fullSec = music[index].fullTime.split(':').reduce((previousValue, item, index) => index === 0 ? previousValue += parseInt(item) * 60 : previousValue += parseInt(item), 0)\n        let counter = 0\n        activeInterval.current = setInterval(() => {\n            sec += 0.25\n            if(sec > 59){\n                min += 1;\n                sec = 0;\n            }\n            let currentSec = min * 60 + sec;\n            counter += 1;\n            setMusicPointPosition(currentSec / fullSec * 100)\n            if(counter === 4){\n                counter = 0\n                dispatch(setTime({index, time: niceTime(min, sec)}))\n            }\n        }, 250)\n    }\n\n    const niceTime = (min, sec) => {\n        let niceTimeSec = Math.round(sec)\n        return `${min < 10 ? '0' + min : min}:${niceTimeSec < 10 ? '0' + niceTimeSec : niceTimeSec}`\n    }\n\n    const togglePause = (isBtn = false) => {\n        if(isBtn){\n            if(isPaused){\n                clearInterval(activeInterval.current) \n            } else {\n                setStoreTime(activeMusic.index)\n            }  \n        }\n        let pause = isPaused\n        setIsPaused(!isPaused)\n        pause ? loadedMusic.current[activeMusic.id].pause() : loadedMusic.current[activeMusic.id].play()\n    }\n\n    return(\n        <>\n            <div className=\"music__picture\">\n                <div className=\"music__picture__left\"></div>\n                <div className=\"music__picture__right\">\n                    <div className=\"music__picture__title\">Начало работы в Treelone</div>\n                    <div className=\"music__picture__player\">\n                        {/* <div className=\"music__picture__subtitle\">asdasds</div> */}\n                        <div className=\"music__mobile__count\">\n                            <div className=\"music__mobile__count__left\">\n                                <div className=\"music__mobile__count__full table\" onClick={(e) => setCurrentTime(e)}></div>\n                                <div className=\"music__mobile__count__now table\" style={{left: musicPointPosition}}></div>\n                            </div>\n                            <div className=\"music__mobile__count__right\"></div>\n                        </div>\n                        <div className=\"music__mobile__control\">\n                            <div className={`music__mobile__arrow ${!activeMusic.index ? 'disabled' : ''}`} onClick={() => {switchTrack('left')}}></div>\n                            <div className={`music__mobile__play ${isPaused ? 'pause' : ''}`} onClick={() => togglePause(true)}></div>\n                            <div className={`music__mobile__arrow rotate ${(activeMusic.index === null || activeMusic.index === music.length - 1) ? 'disabled' : ''}`}  onClick={() => {switchTrack('right')}}></div>\n                            <div className=\"music__mobile__menu\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"music__playlist\" id=\"container\">\n                {\n                    music.map((el, i) => {\n                        return (\n                        <div key={el.id} className={`music__element ${el.id.toString() === activeMusic.id ? 'active' : ''}`} onClick={() => playTrack(el.id.toString(), i)}>\n                            <div className=\"music__logo\" style={{backgroundImage: `url(${el.logo})`}}></div>\n                            <div className=\"music__element__container\">\n                                <div className=\"music__name\">{el.name}</div>\n                                <div className={`music__check ${el.isLearned ? 'learned' : ''}`}></div>\n                                <div className=\"music__time\">\n                                    <span>{el.startTime} :</span>\n                                    <span>{el.fullTime}</span>\n                                </div>\n                            </div>\n                        </div>)\n                    }) \n                }\n            </div>\n        </>\n    )\n}","/Users/mihail/Trello_react/my-app/src/slice/musicSlice.js",[],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":30,"column":11,"nodeType":"142","messageId":"143","endLine":30,"endColumn":21},{"ruleId":"144","severity":1,"message":"145","line":7,"column":17,"nodeType":"146","endLine":7,"endColumn":56},{"ruleId":"147","severity":1,"message":"148","line":7,"column":17,"nodeType":"146","endLine":7,"endColumn":56},{"ruleId":"144","severity":1,"message":"145","line":8,"column":17,"nodeType":"146","endLine":8,"endColumn":61},{"ruleId":"147","severity":1,"message":"148","line":8,"column":17,"nodeType":"146","endLine":8,"endColumn":61},{"ruleId":"144","severity":1,"message":"145","line":9,"column":17,"nodeType":"146","endLine":9,"endColumn":56},{"ruleId":"147","severity":1,"message":"148","line":9,"column":17,"nodeType":"146","endLine":9,"endColumn":56},{"ruleId":"144","severity":1,"message":"145","line":10,"column":17,"nodeType":"146","endLine":10,"endColumn":56},{"ruleId":"147","severity":1,"message":"148","line":10,"column":17,"nodeType":"146","endLine":10,"endColumn":56},{"ruleId":"144","severity":1,"message":"145","line":12,"column":21,"nodeType":"146","endLine":12,"endColumn":60},{"ruleId":"147","severity":1,"message":"148","line":12,"column":21,"nodeType":"146","endLine":12,"endColumn":60},{"ruleId":"147","severity":1,"message":"148","line":23,"column":37,"nodeType":"146","endLine":23,"endColumn":40},{"ruleId":"149","severity":1,"message":"150","line":22,"column":64,"nodeType":"151","messageId":"152","endLine":22,"endColumn":66},{"ruleId":"140","severity":1,"message":"153","line":9,"column":10,"nodeType":"142","messageId":"143","endLine":9,"endColumn":19},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"no-unused-vars","'setNewUser' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]