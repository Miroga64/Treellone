{"ast":null,"code":"var _jsxFileName = \"/Users/mihail/Trello_react/my-app/src/components/scrollWrapper/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useRef } from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport './scrollWrapper.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ScrollWrapper(props) {\n  _s();\n\n  const [scrollWrapperClass, setScrollWrapperClass] = useState(\"scrollWrapper\");\n  const wrapper = useRef(null);\n  const [scrollWitdh, setScrollWidth] = useState(0);\n  let difference = wrapperCurrent.current.offsetHeight - window.innerHeight;\n  let procent = 100 / difference;\n  useEffect(() => {\n    setScrollWrapperClass(\"scrollWrapper fixed\");\n  }, []);\n\n  const handleScroll = () => {\n    console.log(procent, wrapper.current.scrollTop);\n    setScrollWidth(procent * wrapper.current.scrollTop);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: scrollWrapperClass,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"scrollWrapper__scroll\",\n      style: {\n        width: `${scrollWitdh}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"scrollWrapper__hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"scrollWrapper__content\",\n        ref: wrapper,\n        onScroll: handleScroll,\n        children: props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ScrollWrapper, \"iykdb4M4tCOdBKFMlSSYqnGylEE=\");\n\n_c = ScrollWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScrollWrapper\");","map":{"version":3,"sources":["/Users/mihail/Trello_react/my-app/src/components/scrollWrapper/index.jsx"],"names":["useRef","useState","useEffect","ScrollWrapper","props","scrollWrapperClass","setScrollWrapperClass","wrapper","scrollWitdh","setScrollWidth","difference","wrapperCurrent","current","offsetHeight","window","innerHeight","procent","handleScroll","console","log","scrollTop","width","children"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAO,qBAAP;;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA6B;AAAA;;AACxC,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CL,QAAQ,CAAC,eAAD,CAA5D;AACA,QAAMM,OAAO,GAAGP,MAAM,CAAC,IAAD,CAAtB;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,CAAD,CAA9C;AACA,MAAIS,UAAU,GAAGC,cAAc,CAACC,OAAf,CAAuBC,YAAvB,GAAsCC,MAAM,CAACC,WAA9D;AACA,MAAIC,OAAO,GAAG,MAAMN,UAApB;AAGAR,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,qBAAqB,CAAC,qBAAD,CAArB;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMW,YAAY,GAAG,MAAM;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAAqBT,OAAO,CAACK,OAAR,CAAgBQ,SAArC;AACAX,IAAAA,cAAc,CAACO,OAAO,GAAGT,OAAO,CAACK,OAAR,CAAgBQ,SAA3B,CAAd;AACH,GAHD;;AAKA,sBACI;AAAK,IAAA,SAAS,EAAEf,kBAAhB;AAAA,4BACI;AAAK,MAAA,KAAK,EAAC,uBAAX;AAAmC,MAAA,KAAK,EAAE;AAACgB,QAAAA,KAAK,EAAG,GAAEb,WAAY;AAAvB;AAA1C;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,KAAK,EAAC,uBAAX;AAAA,6BACI;AAAK,QAAA,KAAK,EAAC,wBAAX;AAAoC,QAAA,GAAG,EAAED,OAAzC;AAAkD,QAAA,QAAQ,EAAEU,YAA5D;AAAA,kBACKb,KAAK,CAACkB;AADX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GA3BuBnB,a;;KAAAA,a","sourcesContent":["import { useRef } from 'react'\nimport { useState } from 'react'\nimport { useEffect } from 'react'\nimport './scrollWrapper.css'\n\nexport default function ScrollWrapper(props){\n    const [scrollWrapperClass, setScrollWrapperClass] = useState(\"scrollWrapper\")\n    const wrapper = useRef(null)\n    const [scrollWitdh, setScrollWidth] = useState(0)\n    let difference = wrapperCurrent.current.offsetHeight - window.innerHeight;\n    let procent = 100 / difference;\n\n\n    useEffect(() => {\n        setScrollWrapperClass(\"scrollWrapper fixed\")\n    }, [])\n\n    const handleScroll = () => {\n        console.log(procent, wrapper.current.scrollTop)\n        setScrollWidth(procent * wrapper.current.scrollTop)\n    }\n   \n    return(\n        <div className={scrollWrapperClass}>\n            <div class=\"scrollWrapper__scroll\" style={{width: `${scrollWitdh}%`}}></div>\n            <div class=\"scrollWrapper__hidden\">\n                <div class=\"scrollWrapper__content\" ref={wrapper} onScroll={handleScroll}>\n                    {props.children}\n                </div>\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}